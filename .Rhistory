junk5<-with(dat,aggregate(CATM,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),sd))
sumtbl$CUE12.sd<-round(junk5$x,2)
sumtbl$CUE12.se<-round(sumtbl$CUE12.sd/sqrt(sumtbl$n),2)
sumtbl
#end
}
# Plot trawl cue data
plot.tw.cue<-function(mydat,group,species, eb=""){
if (group %in% levels(mydat$AREA)){
if("SITE" %in% names(mydat)){stop("Need Area Template")}
plot.me<-mydat[mydat$AREA==group & mydat$SPC==species,]
}
else if (group %in% levels(mydat$SITE)){
plot.me<-mydat[mydat$SITE==group & mydat$SPC==species,]
}
else {stop(cat("Invalid entry. \nYou may have entered a SITE in an AREA template\n"))}
if (eb=="sd") {
plot(CUE12~YEAR,ylim=c((min(CUE12-CUE12.sd)),(max(CUE12+CUE12.sd))),pch=16,las=1,ylab="Catch (#) per 12-minute Trawl", plot.me, type='b',cex=1.5, xaxt='n')
with(plot.me,arrows(YEAR,CUE12+CUE12.sd,YEAR,CUE12-CUE12.sd,angle=90,code=3,length=0.1))
axis(1,at=unique(plot.me$YEAR))
}
else if (eb=="se") {
plot(CUE12~YEAR,ylim=c((min(CUE12-CUE12.se)),(max(CUE12+CUE12.se))),pch=16,las=1,ylab="Catch (#) per 12-minute Trawl", plot.me, type='b',cex=1.5, xaxt='n')
with(plot.me,arrows(YEAR,CUE12+CUE12.se,YEAR,CUE12-CUE12.se,angle=90,code=3,length=0.1))
axis(1,at=unique(plot.me$YEAR))
}
else if (eb=="") {
plot(CUE12~YEAR,pch=16,las=1,ylab="Catch (#) per 12-minute Trawl", plot.me, type='b',cex=1.5, xaxt='n')
axis(1,at=unique(plot.me$YEAR))
}
}
#These are just misc function surrounding basic statistics with "NA' removed:
#These are good ones for certain functions such as "aggregate"
#Calculates the mean with NA removed:
mean.na<-function(x){
mean(x, na.rm=T)
}
#Calculates the sample size with NA removed:
length.na<-function(x){
sum(!is.na(x))
}
#Calculates STDEV with NA removed:
sd.na<-function(x){
sd(x, na.rm=T)
}
#This function provides eFLEN and eTLEN for all species present in Addison's Excel:
fill.len<-function(mydat=fn125){
len.conv<-read.csv('FLEN_TLEN.csv')
mydat<-merge(mydat,len.conv,by='SPC',all.x=T)
mydat$eFLEN<-round(ifelse(is.na(mydat$FLEN),(mydat$TLEN-mydat$a)/mydat$b,mydat$FLEN),0)
mydat$eTLEN<-round(ifelse(is.na(mydat$TLEN),mydat$FLEN*mydat$b+mydat$a,mydat$TLEN),0)
drops<-c('a','b')
mydat<-mydat[,!(names(mydat) %in% drops)]
mydat
}
#This function calculates relative weight (Wr) based on Blackwell (if species is present) or Addison (if species is not in Blackwell):
rel.Wt<-function(spc,mydat=fn125){
mydat<-fill.len(mydat)
dat1<-read.csv("Black-Addis_Wr.csv")
if (spc %in% dat1$SPC){
hdat<-mydat[mydat$SPC==spc,]
if (abs(dat1[dat1$SPC==spc,'slope'])>0) {
hdat$Ws<-round(10^(log10(hdat$eTLEN)*dat1[dat1$SPC==spc,'slope'] + dat1[dat1$SPC==spc,'int']),2)
hdat$Wr<-round(hdat$RWT/hdat$Ws*100,2)
}
else if (abs(dat1[dat1$SPC==spc, 'b'])>0) {
hdat$Ws<-round(hdat$eFLEN^dat1[dat1$SPC==spc,'b'] * dat1[dat1$SPC==spc,'a'],0)
hdat$Wr<-round(hdat$RWT/hdat$Ws*100,2)
}
Wrdat<-merge(hdat,fn121,by=c('PRJ_CD','SAM'),all.x=T)
Wrdat<-Wrdat[,c('PRJ_CD','YEAR','AREA','SITE','EFF','SPC','FISH','FLEN','TLEN','eFLEN','eTLEN','RWT','SEX','GON','Ws','Wr')]
}
else {
stop("Species Ws equation does not exist for species")
}
Wrdat
}
#Create summary table for Wr based on SITE (aggregate based on SITE):
Wr.site<-function(spc,mydat=fn125){
dat<-rel.Wt(spc,mydat)
#Create a summary table that will give the Ws and Wr:
sumtbl<-with(dat,aggregate(Ws,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA,'SITE'=SITE),mean.na))
colnames(sumtbl)<-c('PRJ_CD','YEAR','SPC','AREA','SITE','Ws.avg')
sumtbl$Ws.avg<-round(sumtbl$Ws.avg,2)
#Sample size for the average:
junk<-with(dat,aggregate(Wr,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA,'SITE'=SITE),length.na))
sumtbl$n<-junk$x
#Average Wr
junk1<-with(dat,aggregate(Wr,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA,'SITE'=SITE),mean.na))
sumtbl$Wr.avg<-round(junk1$x,2)
#Wr (STDEV and SE)
junk2<-with(dat,aggregate(Wr,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA,'SITE'=SITE),sd.na))
sumtbl$Wr.sd<-round(junk2$x,2)
sumtbl$Wr.se<-round(sumtbl$Wr.sd/sqrt(sumtbl$n),2)
sumtbl
#end
}
#Create summary table for Wr based on AREA (aggregate based on AREA):
Wr.area<-function(spc,mydat=fn125){
dat<-rel.Wt(spc,mydat)
#Create a summary table that will give the Ws and Wr:
sumtbl<-with(dat,aggregate(Ws,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),mean.na))
colnames(sumtbl)<-c('PRJ_CD','YEAR','SPC','AREA','Ws.avg')
sumtbl$Ws.avg<-round(sumtbl$Ws.avg,2)
#Sample size for the average:
junk<-with(dat,aggregate(Wr,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),length.na))
sumtbl$n<-junk$x
#Average Wr
junk1<-with(dat,aggregate(Wr,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),mean.na))
sumtbl$Wr.avg<-round(junk1$x,2)
#Wr (STDEV and SE)
junk2<-with(dat,aggregate(Wr,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),sd.na))
sumtbl$Wr.sd<-round(junk2$x,2)
sumtbl$Wr.se<-round(sumtbl$Wr.sd/sqrt(sumtbl$n),2)
sumtbl
#end
}
#This will plot the Wr data summarized for SITE or AREA (user specifies) by YEAR:
#This function is the same as plot.tw.cue above
# May not need to pass species to function since summary only has one species.
Wr.plot<-function(mydat,group,species, eb=""){
if (group %in% levels(mydat$AREA)){
if("SITE" %in% names(mydat)){stop("Need Area Template")}
plot.me<-mydat[mydat$AREA==group & mydat$SPC==species,]
}
else if (group %in% levels(mydat$SITE)){
plot.me<-mydat[mydat$SITE==group & mydat$SPC==species,]
}
else {stop(cat("Invalid entry. \nYou may have entered a SITE in an AREA template\n"))}
if (eb=="sd") {
plot(Wr.avg~YEAR,ylim=c((min(Wr.avg-Wr.sd)),(max(Wr.avg+Wr.sd))),pch=16,las=1,ylab="Relative Weight (%)", plot.me, type='b',cex=1.5, xaxt='n')
with(plot.me,arrows(YEAR,Wr.avg+Wr.sd,YEAR,Wr-Wr.sd,angle=90,code=3,length=0.1))
axis(1,at=unique(plot.me$YEAR))
}
else if (eb=="se") {
plot(Wr.avg~YEAR,ylim=c((min(Wr.avg-Wr.se)),(max(Wr.avg+Wr.se))),pch=16,las=1,ylab="Relative Weight (%)", plot.me, type='b',cex=1.5, xaxt='n')
with(plot.me,arrows(YEAR,Wr.avg+Wr.se,YEAR,Wr.avg-Wr.se,angle=90,code=3,length=0.1))
axis(1,at=unique(plot.me$YEAR))
}
else if (eb=="") {
plot(Wr.avg~YEAR,pch=16,las=1,ylab="Relative Weight (%)", plot.me, type='b',cex=1.5, xaxt='n')
axis(1,at=unique(plot.me$YEAR))
}
}
fndata2<-import.fn.data(mydir, 2013, 'TW1')
fn121<-fndata$fn121
fn123<-fndata$fn123
fn124<-fndata$fn124
fn125<-fndata$fn125
trawl.cue.CATM()
trawl.cue.CATM(fn121, fn123)
fndata2<-import.fn.data(mydir, 1992:2013, 'TW1')
warnings()
names(fn121)
fn121<-fndata$fn121
fn123<-fndata$fn123
fn124<-fndata$fn124
fn125<-fndata$fn125
names(fn121)
head(fn121)
fn121<-fndata2$fn121
fn123<-fndata2$fn123
fn124<-fndata2$fn124
fn125<-fndata2$fn125
names(fn121)
head(fn121)
fn121<-fndata2$FN121
fn123<-fndata2$FN123
fn124<-fndata2$FN124
fn125<-fndata2$FN125
trawl.cue.CATM(fn121, fn123)
tw.cue<-trawl.cue.CATM(fn121, fn123)
area.cue<-trawl.cue.area(fn121,fn123)
head(fn121)
fndata3<-import.fn.data(mydir, 2013, 'GL1', 'FN125')
fndata3<-import.fn.data(mydir, 2013, 'GL1', 'FN121')
head(fndata3$FN121)
fl.rwt('334',fn125)
fl.rwt('334',fn125, logplot=T)
fl.hist('331', fn125)
fl.hist('331', fn125)
fl.rwt('334',fn125, logplot=T)
fn125<-append.spc.names(fndata$FN125)
head(fn125)
SpcName
plot.tw.cue(area.cue, "EB", '081')
plot.tw.cue(area.cue, "EB", '061')
head(area.cue)
area.cue[area.cue$SPC=='061' & area.cue$AREA=="EB",]
area.cue<-trawl.cue.area(fn121,fn123)
dat<-trawl.cue.CATM(fn121,fn123)
sumtbl<-with(dat,aggregate(CATCNT,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),sum))
colnames(sumtbl)<-c('PRJ_CD','YEAR','SPC','AREA','CATCNT')
#Total number caught in a standard 12 minute trawl
junk<-with(dat,aggregate(CATM,list('PRJ_CD'=PRJ_CD,'YEAR'=YEAR,'SPC'=SPC,'AREA'=AREA),sum))
sumtbl$CATM<-round(junk$x,2)
fndata3<-import.fn.data(mydir, 2013, 'TW1')
dat<-trawl.cue.CATM(fndata3$FN121, fndata3$FN123)
dat[dat$SPC=="061",]
dat[dat$SPC=="061" & dat$AREA=="EB",]
fndata3$FN123[fndata3$FN!@#$SAM==3,]
fndata3$FN123[fndata3$FN123$SAM==3,]
1000/204
6000/840
1000/43
str(fndata$FN123$XFRSH_DT)
str(fndata3$FN123$XFRSH_DT)
as.integer(0.5)
as.integer(0.6)
as.integer(0.9)
library(gfsR)
mydir<-'/media/jer/TRAVELDRIVE/FN_Data'
gldata<-import.fn.data(mydir, 2013, 'GL1', c('FN125', 'FN124'))
head(gldata$FN124[gldata$FN124$SPC=='334',])
fn124<-gldata$FN124[gldata$FN124$SPC=='334',]
fn125<-gldata$FN125[gldata$FN125$SPC=='334',]
nrow(fn125)
no.age<-fn125[is.na(fn125$AGE),]
dim(no.age)
table(fn125$AGE)
sum(table(fn125$AGE))
pick.these<-sample(1:nrow(fn125), 20)
fn125_sub<-fn125[pick.these,]
fn125_sub
plot(FLEN~AGE, fn125_sub)
pick.these<-sample(1:nrow(fn125), 30)
fn125_sub<-fn125[pick.these,]
plot(FLEN~AGE, fn125_sub)
library("devtools", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
devtools::install_github('FSA','droglenc')
library(FSA)
wal<-fn125_sub
lencat(wal)
wal<-wal[,c('FLEN', 'AGE')]
lencat(wal)
?lencat
lencat(wal$FLEN, w=50)
wal$lcat<-lencat(wal$FLEN, w=50)
alk.freq<-xtabs(~lcat+age, wal)
alk.freq<-xtabs(~lcat+AGE, wal)
alk.freq
rowSums(alk.freq)
min(fn125$FLEN)
wal$lcat<-lencat(wal$FLEN, w=10, startcat=100)
alk.freq<-xtabs(~lcat+AGE, wal)
rowSums(alk.freq)
wal$lcat<-lencat(wal$FLEN, w=50, startcat=100)
alk.freq<-xtabs(~lcat+AGE, wal)
alk.freq
rowSums(alk.freq)
alk<-prop.table(alk.freq, margin=1)
alk
cc.mlr<-multinom(AGE~lcat, wal)
library(nnet)
cc.mlr<-multinom(AGE~lcat, wal)
cc.mlr<-multinom(AGE~lcat, wal, maxit=200)
min(no.age$AGE)
min(no.age$FLEN)
max(no.age$FLEN)
min(wal$FLEN)
max(wal$FLEN)
lens<-seq(150, 700, 50)
alk<-predict(cc.mlr, data.frame(lens), type='probs')
alk<-predict(cc.mlr, data.frame(lcat=lens), type='probs')
alk
row.names(alk)<-lens
round(alk, 2)
wal.no.age<-fn125[!pickthese,]
wal.no.age<-fn125[!pick.these,]
wal.no.age$lcat<-lencat(wal.no.age$FLEN, w=50, startcat=100))
wal.no.age$lcat<-lencat(wal.no.age$FLEN, w=50, startcat=100)
head(wal.no.age)
wal.no.age<-fn125[!(pick.these),]
head(wal.no.age)
pick.these
head(fn125)
wal.no.age<-fn125[!(fn125[pick.these,]),]
wal.no.age<-fn125[!=pick.these,]
pick.these
wal.no.age<-fn125[!pick.these,]
wal.no.age
nrow(fn125)
wal.no.age<-fn125[!(pick.these),]
wal.no.age
wal.no.age<-fn125[-(pick.these),]
nrow(wal.no.age)
wal.no.age$lcat<-lencat(wal.no.age$FLEN, w=50, startcat=100)
wal.no.age$AGE2<-NA
test<-alkIndivAge(alk, AGE2~FLEN, wal.no.age)
head(test)
min(wal$FLEN)
cc.mlr
lens<-seq(100, 700, 50)
alk<-predict(cc.mlr, data.frame(lcat=lens), type='probs')
row.names(alk)<-lens
round(alk, 2)
wal.no.age$lcat<-lencat(wal.no.age$FLEN, w=50, startcat=100)
wal.no.age$AGE2<-NA
test<-alkIndivAge(alk, AGE2~FLEN, wal.no.age)
head(test)
xtab(~AGE2, wal.no.age)
xtabs(~AGE2, wal.no.age)
table(wal.no.age$AGE2)
xtabs(test$AGE2)
xtabs(~AGE2, test)
xtabs(~AGE, test)
plot(AGE~FLEN, test, col='blue')
plot(FLEN~AGE, test, col='blue')
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE, test, col='red')
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE, test, col='red', pch='*')
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE2, test, col='red', pch='*')
plot(AGE~AGE2, test)
abline(0,1)
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE2, test, col='red', pch='*')
plot(AGE2~AGE, test)
abline(0,1)
alkIndivAge
?options
val<-rep(1:4, each=10)
val
yr<-rep(2001:2001, 4)
yr
yr<-rep(2001:2010, 4)
yr
categ<-rep(c("A", "B","C","D"), each=10)
categ<-as.factor(rep(c("A", "B","C","D"), each=10))
mylab<-c("A", "B","C","D")
plot(val~yr)
plot(val~yr, yaxt='n')
?axis
axis(side=1, at=c(1:4), labels=mylab)
axis(side=2, at=c(1:4), labels=mylab)
slidifyDefaults()
library("slidify", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
slidifyDefaults()
library("slidifyLibraries", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
?runif
ColA <- rep(c('A','B','C'), 5)
setseed(1234)
set.seed(1234)
ColB<-runif(15, min=0, max=100)
ColB
set.seed(1234)
ColB<-round(runif(15, min=0, max=100),0)
ColB
mydf<-data.frame(ColA,ColB)
aggregate(ColB~ColA, data=mydf)
aggregate(ColB~ColA, data=mydf, fun=mean)
aggregate(ColB~ColA, data=mydf, fun=mean)
aggregate(ColB~ColA, data=mydf, FUN=mean)
ColB
library("slidify", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
library("slidifyLibraries", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
slidify()
slidify(index.Rmd)
getwd()
slidify('/Tufts/Oct20/index.Rmd')
slidify('Tufts/Oct20/index.Rmd')
library(slidify)
publish_github(Tufts, gfs8966)
slidify()
get wd
getwd()
slidify('Tufts/Oct20/index.Rmd')
publish_github(Tufts, gfs8966)
publish_github('test', 'gfs8966')
publish(repo='test', username='gfs8966', host='github')
SAM<-c(1:3)
Date<-c('Jul 2', 'Aug 5', 'Aug 9')
Gear<-c('Efish', 'GNet', 'Efish')
mytab<-xtable::xtable(data.frame(SAM, Date, Gear))
print(mytab, type='html')
demo('shiny')
demo(shiny)
library(shiny)
demo(shiny)
demo('shiny')
a<-c(1:10)
a
b<-letters[1:10]
b
class(a); class(b)
summary(a)
summary(b)
length(a); length(b)
mean(a)
min(a)
max(a)
quantile(a)
seq(0,1,0.1)
quantile(a, probs=seq(0,1,0.1))
c<-c(1:5,NA,6:10)
c
mean(c)
mean(c, na.rm=T)
anyNA(c)
d<-c(1:5, NULL, 6:10)
d
mean(d)
matrix(a, ncol=2)
array(a, dim=c(2,2,3))
list(a, b, c("Hi"))
mylist<-list(a=a, b=b, c=c("Hi"))
mylist
mylist$c
data.frame(a,b,d)
data.frame(a,b,c)
mylist$c
c
a<-1:20
a
mylist$a
spc<-rep(c('red fish', 'blue fish'), 5)
set.seed(16)
tl<-round(runif(10, min=250, max=500),0)
fish.data<-data.frame(spc, tl)
fish.data
str(fish.data)
barplot(fish.data$tl, col=as.factor(spc))
plot(tl~spc, fish.data)
table(fish.data$spc)
with(fish.data, by(tl, spc, mean)) #same as writing by(fish.data$tl, fish.data$spc, mean)
tapply(fish.data$tl, fish.data$spc, mean) # we'll deal with the apply family in more detail later
getwd()
setwd('/home/jer/Tufts')
dir()
dir()
len.dat<-read.csv('StatsClass/lengthdata.csv')
str(len.dat)
head(len.dat, 15)
len.dat$SPC<-as.factor(len.dat$SPC)
len.dat$SEX<-as.factor(len.dat$SEX)
len.dat$SAM<-as.factor(len.dat$SAM)
head(len.dat, 15)
str(len.dat)
summary(len.dat)
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
pdf('StatsClass/myhist.pdf')
hist(len.dat$FLEN)
dev.off()
pdf('StatsClass/myhist.pdf')
hist(len.dat$FLEN)
dev.off()
pdf('StatsClass/mybar.pdf')
barplot(table(len.dat$SPC))
dev.off()
pdf('StatsClass/allfigs.pdf')
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
dev.off()
?pdf
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
pdf('StatsClass/myhist.pdf')
hist(len.dat$FLEN)
dev.off()
pdf('StatsClass/mybar.pdf')
barplot(table(len.dat$SPC))
dev.off()
pdf('StatsClass/allfigs.pdf')
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
dev.off()
?write.csv
mysummary<-with(len.dat, tapply(FLEN, SPC, length)) # length = number of obs.
mysummary
as.data.frame(mysummary)
write.csv(as.data.frame(mysummary), 'StatsClass/mysummary.csv', row.names=T)
dir('StatsClass')
7>6
a>3
a
a<2 | a>9
subset(a, a>8)
a[a>8]
head(len.dat)
len.dat[len.dat$FLEN<500,c(2,3)]
len.dat[len.dat$SEX==1 & len.dat$SPC==61,]
len.dat[len.dat$SEX==1 & !is.na(len.dat$SEX) & len.dat$SPC==61,]
len.dat[len.dat$SEX==1 & !is.na(len.dat$SEX) & len.dat$FLEN108,]
len.dat[len.dat$SEX==1 & !is.na(len.dat$SEX) & len.dat$FLEN==108,]
len.dat[len.dat$SEX==1 & !is.na(len.dat$SEX) & len.dat$FLEN==108 | len.dat$SPC==121,]
spc61<-subset(len.dat, subset=(SPC==61))
plot(FLEN~SPC, spc61)
levels(spc61$SPC)
unique(spc61$SPC)
spc61$SPC<-droplevels(spc61$SPC)
levels(spc61$SPC)
subset(len.dat, subset=(SPC==380 & SEX==2))
subset(len.dat, subset=(SPC==380 | SEX==2))
x<-letters[1:3]
y<-letters[4:6]
x
y
merge(x,y)
len.dat$SEX2<-with(len.dat, ifelse(SEX==1, 'male', ifelse(SEX==2,'female','unk')))
head(len.dat)
tail(len.dat)
head(len.dat, 20)
key.table<-data.frame(SEX=c(1,2,3), SEX2=c('male','female','unk'))
key.table
key.table<-data.frame(SEX=c(1,2,3), SEX3=c('male','female','unk'))
merge(len.dat, key.table, by='SEX')
malesmelt<-data.frame(SPC=121, SEX=1, NAME='smelt male')
malesmelt
merge(len.dat, malesmelt, by=c('SPC', 'SEX'))
merge(len.dat, malesmelt, by=c('SPC', 'SEX'), all.x=T)
