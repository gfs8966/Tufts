## Long to Wide
len.dat<-len.dat[len.dat$SPC!=380,] # sculpins don't have a FLEN
len.dat$TLEN<-(len.dat$FLEN+10)/10
head(len.dat)
library(reshape2)
len.dat.long<-melt(len.dat, id=c('SAM', 'SPC', 'FISH', 'SEX'))
head(len.dat.long)
tail(len.dat.long)
units<-data.frame(variable=c('TLEN', 'FLEN'), unit=c('cm','mm'))
units
len.dat.long<-merge(len.dat.long, units, by='variable')
head(len.dat.long)
tail(len.dat.long)
len.dat.long<-len.dat.long[,c(2:5,1,6:7)]
##### reshape
len.dat.long<-len.dat.long[,-7]
len.dat.wide<-reshape(len.dat.long, direction='wide', idvar=c('SAM','SPC','FISH','SEX'),
v.names='value', timevar='variable')
head(len.dat.wide)
names(len.dat.wide)[5:6]<-c('FLEN','TLEN')
head(len.dat.wide)
##### Summarizing with dcast
dcast(len.dat.wide, SPC~SEX, mean, value.var='FLEN')
dcast(len.dat.wide, SAM~SPC, mean, value.var='TLEN')
##### Using aggregate
head(len.dat)
sum1<-aggregate(FLEN~SPC, len.dat, mean)
sum1
# similar to the dcast example...
sum2<-aggregate(FLEN~SPC+SEX, data=len.dat, mean)
sum2 # notice it only returns combinations that exist
x<-as.data.frame(unique(len.dat$SPC))
y<-as.data.frame(c(1,2))
df<-merge(x,y)
names(df)<-c('SPC', 'SEX')
merge(sum2, df, by=c('SPC','SEX'), all.y=T)
aggregate(TLEN~SAM+SPC, len.dat, max)
# generate a catch summary
aggregate(FISH~SAM+SPC, data=len.dat, length)
# now FLEN and TLEN
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
aggregate(cbind(FLEN, TLEN)~SPC, data=len.dat, mean)
# suppose we wanted mean, sd and n...
# need to write a custom function
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=length(x))}
b
myfunct(b)
aggregate(FLEN~SAM+SPC, len.dat, myfunct)
aggregate(cbind(FLEN,TLEN)~SPC, data=len.dat, myfunct)
##### Dates
library(lubridate)
Sys.time()
Sys.time()+years(1)
leap_year(2016)
ymd('20150301')+years(1)
ymd('20150301')+days(365)
ymd('020301')
ymd('020301')-years(100)
##### Practical example
# enter the data
SAM<-c(1:3)
SetDate<-c('02/07/14','05/08/14','09/08/14')
LiftDate<-c('03/07/14','07/08/14','11/08/14')
SetTime<-c('09:45', '10:15', '13:45')
LiftTime<-c('11:45', '9:30', '10:00')
Gear<-c('Gnet', 'GNet', 'GNet')
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear, stringsAsFactors=F)
# check classes
str(set.data)
# make 1 long date/time field
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
# convert to date class
set.data$SET1<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
set.data$LIFT1<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
with(set.data, LIFT1-SET1)
# not exactly what we wanted...
# try using lubridate functions
set.data$SET2<-dmy_hm(set.data$SET)
set.data$LIFT2<-dmy_hm(set.data$LIFT)
dur<-with(set.data, LIFT2-SET2)
dur
class(dur)
as.period(dur)
as.numeric(dur, units='hours')
as.numeric(dur, units='days')
as.numeric(dur, units='mins')
source('~/Tufts/Nov10/nov10examples.R')
source('~/Tufts/Nov10/nov10examples.R')
getwd()
len.dat<-read.csv('StatsClass/lengthdata.csv')
View(len.dat[order(len.dat$SAM),])
len.dat<-read.csv('StatsClass/lengthdata.csv')
getwd()
dir()
len.dat<-read.csv('Tufts/StatsClass/lengthdata.csv')
sum1<-aggregate(FISH~SAM+SPC, data=len.dat, length)
sum1
SAM<-c(1:3)
SetDate<-c('02/07/14','05/08/14','09/08/14')
LiftDate<-c('03/07/14','07/08/14','11/08/14')
SetTime<-c('09:45', '10:15', '13:45')
LiftTime<-c('11:45', '9:30', '10:00')
Gear<-c('Gnet', 'GNet', 'GNet')
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear, stringsAsFactors=F)
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
set.data$SET1<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
set.data$LIFT1<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
set.data$SET2<-dmy_hm(set.data$SET)
set.data$LIFT2<-dmy_hm(set.data$LIFT)
set.dat$dur<-with(set.dat, as.numeric(LIFT2-SET2, units='hours'))
set.data$dur<-with(set.data, as.numeric(LIFT2-SET2, units='hours'))
set.data$SET2<-dmy_hm(set.data$SET)
library(lubridate)
Sys.time()
Sys.time()+years(1)
leap_year(2016)
ymd('20150301')+years(1)
ymd('20150301')+days(365)
ymd('020301')
ymd('020301')-years(100)
##### Practical example
# enter the data
SAM<-c(1:3)
SetDate<-c('02/07/14','05/08/14','09/08/14')
LiftDate<-c('03/07/14','07/08/14','11/08/14')
SetTime<-c('09:45', '10:15', '13:45')
LiftTime<-c('11:45', '9:30', '10:00')
Gear<-c('Gnet', 'GNet', 'GNet')
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear, stringsAsFactors=F)
# check classes
str(set.data)
# make 1 long date/time field
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
# convert to date class
set.data$SET1<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
set.data$LIFT1<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
with(set.data, LIFT1-SET1)
# not exactly what we wanted...
# try using lubridate functions
set.data$SET2<-dmy_hm(set.data$SET)
set.data$LIFT2<-dmy_hm(set.data$LIFT)
dur<-with(set.data, LIFT2-SET2)
dur
class(dur)
as.period(dur)
as.numeric(dur, units='hours')
as.numeric(dur, units='days')
as.numeric(dur, units='mins')
### homework solution
sum1<-aggregate(FISH~SAM+SPC, data=len.dat, length)
set.data$dur<-with(set.data, as.numeric(LIFT2-SET2, units='hours'))
x<-as.data.frame(unique(len.dat$SPC))
y<-as.data.frame(c(1,2,3))
df<-merge(x,y)
names(df)<-c('SPC', 'SAM')
sum3<-merge(sum2, df, by=c('SPC','SEX'), all.y=T)
sum3<-merge(sum1, df, by=c('SPC','SEX'), all.y=T)
head(sum1)
sum3<-merge(sum1, df, by=c('SPC','SAM'), all.y=T)
sum3
sum3$FISH[is.na(sum3$FISH)]<-0
sum3
names(sum3)<-c('SPC','SAM', 'N')
sum4<-merge(sum3, set.data, by='SAM')
head(sum4)
sum4$catstan<-with(sum4, N/dur)
aggregate(catstan~SPC, sum4, mean)
head(sum4)
sum4[sum4$SPC==61,]
aggregate(catstan~SPC, sum4, mean*24)
perdaymean<-function(x){mean(x)*24}
aggregate(catstan~SPC, sum4, perdaymean)
sum4[sum4$SPC==61,]
1.23*24+0.14*24+0.06*24
34.32/3
sum1<-aggregate(FISH~SAM+SPC, data=len.dat, length)
head(sum1)
set.data$dur<-with(set.data, as.numeric(LIFT2-SET2, units='hours'))
head(set.dat)
head(set.data)
x<-as.data.frame(unique(len.dat$SPC))
y<-as.data.frame(unique(len.dat$SAM)
df<-merge(x,y)
y<-as.data.frame(unique(len.dat$SAM))
df<-merge(x,y)
df
names(df)<-c('SPC', 'SAM')
sum3<-merge(sum1, df, by=c('SPC','SAM'), all.y=T)
head(sum3)
sum3$FISH[is.na(sum3$FISH)]<-0
head(sum3)
names(sum3)<-c('SPC','SAM', 'N')
sum4<-merge(sum3, set.data, by='SAM')
head(sum4)
sum4$catstan<-with(sum4, N/dur)
head(sum4)
perdaymean<-function(x){mean(x)*24}
aggregate(catstan~SPC, sum4, perdaymean)
sum4[sum4$SPC==61,]
library(gfsR)
import.fn.data("/media/jer/Traveldrive/", 2013:2014, 'GL1')
import.fn.data("media/jer/Traveldrive/", 2013:2014, 'GL1')
getwd()
import.fn.data("/home/jer", 2013:2014, 'GL1')
fndata<-import.fn.data("/home/jer", 2013:2014, 'GL1')
SpcName
sum<-site.cue('CATWT', fndata$FN121, fndata$FN123)
sum
sum[sum$SPC==334,]
append.spc.names(sum)
sum2<-append.spc.names(sum)
sum2[sum$SPC_NM=='Walleye',]
sum2[sum2$SPC_NM=='Walleye',]
setwd('Tufts')
my.function<-function(x){cbind(xbar=mean(x),n=length(x))}
my.function(0:10)
my.function
se<-function(x){sd(x)/sqrt(length(x))}
se(rnorm(100))
se(rnorm(100, sd=10))
cust.plot<-function(x,y) {
par(mar=c(5,5,5,1), cex.axis=0.75, cex.lab=0.75, mfrow=c(1,1))
plot(x,y, pch=23, col='red', bg='blue')
abline(v=mean(x), lty=3)
abline(h=mean(y), lty=3)
abline(lm(y~x+1), col='red', lty=2, lwd=3)
title("Best Plot Ever")
}
cust.plot(rnorm(100), rnorm(100))
cust.plot(rnorm(100), rnorm(100))
cust.plot(rnorm(100), rnorm(100))
cust.plot(rnorm(100), rnorm(100))
cust.plot(rnorm(100), rnorm(100))
FUN1(2)
source('~/StatsClass/customFUN1.R')
s
source('~/Tufts/StatsClass/customFUN1.R')
FUN1(2)
FUN1
FUN1(10)
myfun<-function(x, y=5) {x*y}
myfun(5)
myfun(5,2)
myfun(x=10, y=15)
args(myfun)
myfun<-function(){invis<-rnorm(100); print(mean(invis))}
myfun()
myfun()
myfun()
myfun()
invis
myfun2<-function(){invis2<<-rnorm(100); print(mean(invis2))}
myfun()
invis2
myfun()
invis2
myfun2()
invis2
for (placeholder in 1:10) {print (placeholder)}
x<-1
while(x < 5) {cat(x); x<-x+1}
x
for (i in 1:5){
for (j in 6:10){
cat(paste(i*j, " "))
}
}
a<-letters[1:15]
for (i in a){print(i)}
for (i in 5:length(a)){print (i)}
for (i in 1:length(a)){print(paste(i,a[i]))}
b<-numeric() # creates a 'storage' vector
b
for (i in 1:5){
print(i)
b<-rbind(b, mean(rnorm(10)))
print(b)
# adding a manual pause will help you see what is going on
# need to press <return> while in console to advance
readline("Press <return> to continue")
}
b
for (i in 1:5){
print(i)
b<-rbind(b, mean(rnorm(10)))
print(b)
# adding a manual pause will help you see what is going on
# need to press <return> while in console to advance
#readline("Press <return> to continue")
}
for (i in 1:5){
print(i)
b<-rbind(b, mean(rnorm(10)))
b
# adding a manual pause will help you see what is going on
# need to press <return> while in console to advance
#readline("Press <return> to continue")
}
for (i in 1:5){
print(i)
b<-rbind(b, mean(rnorm(10)))
print(b)
# adding a manual pause will help you see what is going on
# need to press <return> while in console to advance
#readline("Press <return> to continue")
}
b<-numeric() # creates a 'storage' vector
for (i in 1:5){
print(i)
b<-rbind(b, mean(rnorm(10)))
print(b)
# adding a manual pause will help you see what is going on
# need to press <return> while in console to advance
#readline("Press <return> to continue")
}
fun1<-function(x){
y<-2*x}
fun1(5)
y
fun1<-function(x){
y<<-2*x}
fun1(5)
y
fun1<-function(x){
2*x}
fun1(5)
fun1<-function(x){
y<-2*x
y}
fun1(5)
y
fun1(10)
y
fun1<-function(x){
z<-2*x
z}
fun1(10)
z
y<-fun1(10)
y
y<-fun1(100)
y
fun1(100)
y<-fun1(100)
y
for (i in 1:10){
b<-rbind(b,i)
b
}
b
b<-1
for (i in 1:10){
b<-rbind(b,i)
b
}
b
for (i in 1:10){
b<-rbind(b,i)
print(b)
}
b<-1
for (i in 1:10){
b<-rbind(b,i)
print(b)
}
b<-1
for (i in 1:4){
b<-rbind(b,i)
print(b)
}
b<-1
for (i in 1:4){
b<-rbind(b,i)
cat(b)
}
mydat<-read.csv('StatsClass/lengthdata.csv')
spc<-unique(mydat$SPC)
spc
spc<-spc[spc!=380]
par(mfrow=c(3,2), mar=c(5,4,1,1))
for (i in spc){
x<-mydat[mydat$SPC==i,]
boxplot(FLEN~SEX, x)
}
x<-1:10
ifelse(x>5, x+1, x^2)
10%%2
10%%3
for (i in x){
if (i%%2==0) {print(i^2)}
else {print(i/10)}
}
for (i in x){
if (i%%2==0) {next}
else(cat(i))
}
for (i in x){
if (i^2>25) {break}
else(cat(i))
}
custom.csv<-function(filename) {
if(file.exists(filename)){mycsv<<-read.csv(filename)}
else{cat('File does not exist')}
}
custom.csv('junk123.csv')
custom.csv('StatsClass/lengthdata.csv')
head(mycsv)
custom.csv2<-function(filename) {
if(file.exists(filename)){mycsv<-read.csv(filename);
mycsv}
else{cat('File does not exist')}
}
custom.csv('StatsClass/lengthdata.csv')
custom.csv2('StatsClass/lengthdata.csv')
mycsv<-custom.csv2('StatsClass/lengthdata.csv')
head(mycsv)
mylist<-list(a=1:10, b=100:200, c=sample(100, 1:100), d=rnorm(100))
mydf<-data.frame(x=rep(a, 1000), y=(rnorm(10000)))
a<-1:10
mydf<-data.frame(x=rep(a, 1000), y=(rnorm(10000)))
head(mydf)
system.time(
for (i in a) {
cat(mean(mydf$y[mydf$x==i]))}
)
system.time(cat(tapply(mydf$y, mydf$x, mean)))
mydf<-data.frame(x=rep(a, 1000), y=(rnorm(10000)))
system.time(for (i in a) {cat(mean(mydf$y[mydf$x==i]))})
system.time(cat(tapply(mydf$y, mydf$x, mean)))
mydf<-data.frame(x=rep(a, 10000), y=(rnorm(1000000)))
system.time(for (i in a) {cat(mean(mydf$y[mydf$x==i]))})
system.time(cat(tapply(mydf$y, mydf$x, mean)))
mylist<-list(a=1:10, b=100:200, c=sample(100, 1:100), d=rnorm(100))
lapply(mylist, mean)
sapply(mylist, mean)
xyz<-sapply(mylist, mean)
xyz
w<-100
for (i in 1:4) {
filename<-paste('StatsClass/myfile', i, '.csv', sep="")
set.seed(w)
df<-data.frame(x=1:100, y=rnorm(100))
write.csv(df, filename, row.names=F)
w<-w+1
}
dir('StatsClass/')
allfiles<-dir('StatsClass/')
allfiles
allfiles<-grep(allfiles, pattern='^myfile', value=T)
allfiles
allfiles<-paste('StatsClass/', allfiles, sep="")
allfiles
newlist<-lapply(allfiles, read.csv)
str(newlist)
lapply(newlist, FUN=function(x) mean(x[,2])) # note the use of the anonymous function
mean(newlist[[1]][,2])
mean(newlist[[2]][,2])
mean(newlist[[3]][,2])
sapply(newlist, FUN=function(x) mean(x[,2]))
len.dat<-read.csv('StatsClass/lengthdata.csv')
head(len.dat)
tapply(len.dat$FLEN, len.dat$SPC, mean)
len.list<-split(len.dat, len.dat$SPC)
str(len.list)
sapply(len.list, FUN=function(x) mean(x$FLEN)) # note the use of the anonymous function
lapply(len.list, FUN=function(x) hist(x$FLEN, main=x$SPC[1]))
len.dat<-len.dat[len.dat$SPC!=380,]
len.list<-split(len.dat, len.dat$SPC)
sapply(len.list, FUN=function(x) mean(x$FLEN)) # note the use of the anonymous function
lapply(len.list, FUN=function(x) hist(x$FLEN, main=x$SPC[1]))
lapply(len.list, FUN=function(x) hist(x$FLEN, main=x$SPC[1]))
lapply(len.list, FUN=function(x) print(hist(x$FLEN, main=x$SPC[1]))
)
lapply(len.list, FUN=function(x) hist(x$FLEN, main=x$SPC[1])
)
library(gfsR)
mypath<-'media/jer/TRAVELDRIVE/FN_Data'
fn.data<-import.fn.data(mypath, 1992:2013, 'GL1', 'FN125')
mypath<-'/media/jer/TRAVELDRIVE/FN_Data'
fn.data<-import.fn.data(mypath, 1992:2013, 'GL1', 'FN125')
fn125<-fn.data$FN125
head(fn125)
nrow(fn125)
unique(fn125$PRJ_CD)
fl.hist(334, fn.data$FN125)
fl.hist(081, fn.data$FN125)
fl.hist(331, fn.data$FN125)
fl.hist(81, fn.data$FN125)
fl.hist('081', fn.data$FN125)
head(spc.names)
append.spc.names(fn125)
fn125<-fn.data$FN125
fn125<-append.spc.names(fn125)
head(fn125)
fn.data<-import.fn.data(mypath, 1992:2013, 'TW1')
mycue<-site.cue
mycue<-site.cue(fn.data$FN121, fn.data$FN123)
fn.data<-import.fn.data(mypath, 1992:2013, 'GL1')
mycue<-site.cue(fn.data$FN121, fn.data$FN123)
mycue<-site.cue('CATCN', fn.data$FN121, fn.data$FN123)
mycue<-site.cue('CATCNT', fn.data$FN121, fn.data$FN123)
head(mycue)
plot(1:10~21:30)
x<-1:10
y<-21:30
plot(y~x)
