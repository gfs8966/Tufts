library(lubridate)
library(animation)
pdst<-read.csv('pDST tag/pDST_BT_block1.csv', stringsAsFactors=F)
head(pdst)
str(pdst)
names(pdst)<-c('date', 'Pressure', 'Temp')
pdst$DATE<-dmy_hms(pdst$date)
temp_dep_plot3<-function(startval){
oopt<-ani.options(interval = 0.1)
xlim1<-min(pdst$Temp)
xlim2<-max(pdst$Temp)
ylim1<-max(pdst$Pressure)
ylim2<-min(pdst$Pressure)
par(mar=c(5,5,1,1))
for (i in 1:1000){
if(i<60) {plot(Pressure[startval:(startval+i)]~Temp[startval:(startval+i)], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch="*")
ani.pause()}
else {plot(Pressure[(startval+i-60):(startval+i)]~Temp[(startval+i-60):(startval+i)], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch="*")
ani.pause()
}
}
}
temp_dep_plot3(20000)
windows()
window()
x11()
temp_dep_plot3(20000)
x11()
temp_dep_plot3(20000)
x11()
temp_dep_plot3(20000)
oopt<-ani.options(interval = 0.1, nmax=500
temp_dep_plot2<-function(){
xlim1<-min(pdst$Temp)
xlim2<-max(pdst$Temp)
ylim1<-max(pdst$Pressure)
ylim2<-min(pdst$Pressure)
par(mar=c(5,5,1,1))
for (i in 1:500{
if(i<60) {plot(Pressure[1:i]~Temp[1:i], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch='*')
}
else {plot(Pressure[(i-60):i]~Temp[(i-60):i], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch='*')
}
}
}
oopt<-ani.options(interval = 0.1, nmax=500
temp_dep_plot2<-function(){
xlim1<-min(pdst$Temp)
xlim2<-max(pdst$Temp)
ylim1<-max(pdst$Pressure)
ylim2<-min(pdst$Pressure)
par(mar=c(5,5,1,1))
for (i in 1:500){
if(i<60) {plot(Pressure[1:i]~Temp[1:i], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch='*')
}
else {plot(Pressure[(i-60):i]~Temp[(i-60):i], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch='*')
}
}
oopt<-ani.options(interval = 0.1, nmax=500)
temp_dep_plot2<-function(){
xlim1<-min(pdst$Temp)
xlim2<-max(pdst$Temp)
ylim1<-max(pdst$Pressure)
ylim2<-min(pdst$Pressure)
par(mar=c(5,5,1,1))
for (i in 1:500){
if(i<60) {plot(Pressure[1:i]~Temp[1:i], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch='*')
}
else {plot(Pressure[(i-60):i]~Temp[(i-60):i], pdst, xlim=c(xlim1,xlim2), ylim=c(ylim1, ylim2),
ylab='Depth', xlab='Temp', type='b', pch='*')
}
}
}
saveHTML({
ani.options(interval = 0.1, nmax = 500)
temp_dep_plot2()
}, img.name = "dst_plot", title = "Brown Trout Movement",
description = c("Animated depth by temp movement captured by pDST tag"))
################################
## Nov. 3, Managing Data in R ##
## Jeremy Holden              ##
################################
##### Vectors
a<-c(1:10)
b<-letters[1:10]
class(a); class(b)
str(a); str(b)
summary(a)
summary(b)
length(a); length(b)
##### Numeric vectors
mean(a)
min(a)
max(a)
quantile(a)
quantile(a, probs=seq(0,1,0.1))
###### NA example
c<-c(1:5,NA,6:10)
mean(c)
mean(c, na.rm=T)
anyNA(c)
d<-c(1:5, NULL, 6:10)
mean(d)
##### Matrix, Array and Dataframes
matrix(a, ncol=2)
array(a, dim=c(2,2,3))
# We're not likely going to spend much time with matrices and arrays
# Dataframe - our main work horse!
data.frame(a,b,d)
data.frame(a,b,c)
###### Using 'rep' to make a dataframe
spc<-rep(c('red fish', 'blue fish'), 5)
set.seed(16)
tl<-round(runif(10, min=250, max=500),0)
fish.data<-data.frame(spc, tl)
fish.data
str(fish.data)
###### default is to assign as text as 'Factors', why is this important?
barplot(fish.data$tl, col=as.factor(spc))
plot(tl~spc, fish.data)
table(fish.data$spc)
with(fish.data, by(tl, spc, mean)) #same as writing by(fish.data$tl, fish.data$spc, mean)
tapply(fish.data$tl, fish.data$spc, mean) # we'll deal with the apply family in more detail later
##### Reading data
getwd()
setwd('/home/jer/Tufts')
dir()
dir.create('StatsClass')
dir()
# move lengthdata.csv to this new directory
len.dat<-read.csv('StatsClass/lengthdata.csv')
str(len.dat)
# maybe we want to convert to some factors
len.dat$SPC<-as.factor(len.dat$SPC)
len.dat$SEX<-as.factor(len.dat$SEX)
len.dat$SAM<-as.factor(len.dat$SAM)
##### Saving Figures
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
pdf('StatsClass/myhist.pdf')
hist(len.dat$FLEN)
dev.off()
pdf('StatsClass/mybar.pdf')
barplot(table(len.dat$SPC))
dev.off()
pdf('StatsClass/allfigs.pdf')
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
dev.off()
##### Saving as text
mysummary<-with(len.dat, tapply(FLEN, SPC, length)) # length = number of obs.
mysummary
as.data.frame(mysummary)
write.csv(as.data.frame(mysummary), 'StatsClass/mysummary.csv', row.names=T)
dir('StatsClass')
##### Operators
7>6
a>3
a<2 | a>9
##### Subsetting
subset(a, a>8)
a[a>8]
len.dat[len.dat$FLEN<500,c(2,3)]
len.dat[len.dat$SEX==1 & len.dat$SPC==61,]
len.dat[len.dat$SEX==1 & !is.na(len.dat$SEX) & len.dat$SPC==61,]
spc61<-subset(len.dat, subset=(SPC==61))
plot(FLEN~SPC, spc61)
levels(spc61$SPC)
unique(spc61$SPC)
# What just happened? Subsetting worked but factor levels still present...???
# need to remove all factor levels
#spc61<-subset(len.dat, subset=(SPC==61), drop=T)
spc61$SPC<-droplevels(spc61$SPC)
levels(spc61$SPC)
##### what's the difference between & and |
subset(len.dat, subset=(SPC==380 & SEX==2))
subset(len.dat, subset=(SPC==380 | SEX==2))
##### Merge
# all combinations
x<-letters[1:3]
y<-letters[4:6]
merge(x,y)
##### Lookup table
# let's add some names to decode SEX
len.dat$SEX2<-with(len.dat, ifelse(SEX==1, 'male', ifelse(SEX==2,'female','unk')))
# Using merge
key.table<-data.frame(SEX=c(1,2,3), SEX2=c('male','female','unk'))
merge(len.dat, key.table, by='SEX')
##### Use two fields
malesmelt<-data.frame(SPC=121, SEX=1, NAME='smelt male')
merge(len.dat, malesmelt, by=c('SPC', 'SEX'))
merge(len.dat, malesmelt, by=c('SPC', 'SEX'), all.x=T)
len.dat<-read.csv('StatsClass/lengthdata.csv')
tapply(len.dat$FLEN, len.dat$SPC, mean, na.rm=T)
with(len.dat, by(FLEN, SPC, mean, na.rm=T))
by(len.dat$FISH, len.dat[,1:2], length)
aggregate(FISH~SAM+SPC, len.dat, length)
SAM<-c(1:3)
Date<-c('Jul 2', 'Aug 5', 'Aug 9')
Gear<-c('Efish', 'GNet', 'Efish')
mytab<-data.frame(SAM, Date, Gear)
newtab<-merge(len.dat, mytab, by=c('SAM'))
head(newtab)
mean(newtab$FLEN[newtab$SPC==61 & newtab$Gear=='Efish'])
newtab$FLEN[newtab$SPC==61 & newtab$Gear=='Efish']
mean(newtab$FLEN[newtab$SPC==61 & newtab$Gear=='Efish'])
plot(FLEN~Gear, newtab[newtab$SPC==121,])
a<-c(letters[3:5], letters[1:2], letters[6:10])
a
order(a)
set.seed(123)
b<-round(runif(10, min=0, max=50),0)
b
order(b)
order(a, decreasing = T)
order(b, decreasing=T)
order(-b)
myord<-order(a)
a[myord]
a
a[2:4]
b[order(b)]
b[order(-b)]
len.dat<-read.csv('StatsClass/lengthdata.csv')
View(len.dat[order(len.dat$SAM),])
View(len.dat[order(len.dat$SAM, len.dat$SPC),])
len.dat<-len.dat[len.dat$SPC!=380,] # sculpins don't have a FLEN
len.dat<-len.dat[len.dat$SPC!=380,] # sculpins don't have a FLEN
len.dat$TLEN<-(len.dat$FLEN+10)/10
head(len.dat)
library(reshape2)
len.dat.long<-melt(len.dat, id=c('SAM', 'SPC', 'FISH', 'SEX'))
head(len.dat.long)
tail(len.dat.long)
units<-data.frame(variable=c('TLEN', 'FLEN'), unit=c('cm','mm'))
units
len.dat.long<-merge(len.dat.long, units, by='variable')
head(len.dat.long)
len.dat.long<-len.dat.long[,c(2:5,1,6:7)]
head(len.dat.long)
tail(len.dat.long)
len.dat.long<-len.dat.long[,-7]
len.dat.wide<-reshape(len.dat.long, direction='wide', idvar=c('SAM','SPC','FISH','SEX'),
v.names='value', timevar='variable')
head(len.dat.wide)
names(len.dat.wide)[5:6]<-c('FLEN','TLEN')
head(len.dat.wide)
dcast(len.dat.wide, SPC~SEX, mean, value.var='FLEN')
dcast(len.dat.wide, SAM~SPC, max, value.var='TLEN')
head(len.dat.wide)
dcast(len.dat.wide, SAM~SPC, mean, value.var='TLEN')
?aggregate
head(len.dat)
sum1<-aggregate(FLEN~SPC, len.dat, mean)
sum1
sum2<-aggregate(FLEN~SPC+SEX, data=len.dat, mean)
sum2 # notice it only returns combinations that exist
x<-unique(len.dat$SPC)
y<-unique(len.dat$SEX)
x<-as.data.frame(unique(len.dat$SPC))
y<-as.data.frame(unique(len.dat$SEX))
df<-merge(x,y)
df
y<-as.data.frame(c(1,2))
df<-merge(SPC=x,SEX=y)
x<-as.data.frame(unique(len.dat$SPC))
y<-as.data.frame(c(1,2))
df<-merge(SPC=x,SEX=y)
y
x
df<-merge(SPC=x,SEX=y)
df<-merge(x,y)
names(df)<-c('SPC', 'SEX')
df
sum2
merge(sum2, df, by=('SPC', 'SEX'))
merge(sum2, df, by=c('SPC','SEX'))
merge(sum2, df, by=c('SPC','SEX'), all.y=T)
aggregate(TLEN~SAM+SPC, len.dat, max)
aggregate(FISH~SAM+SPC, data=len.dat, length)
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
aggregate(cbind(FLEN, TLEN)~SPC, data=len.dat, mean)
b
myfunct(b)
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=length(x))}
myfunct(b)
aggregate(FLEN~SAM+SPC, len.dat, myfunct)
aggregate(cbind(FLEN,TLEN)~SPC, data=len.dat, myfunct)
library(lubridate)
Sys.time()
Sys.time()+years(1)
leap_year(2016)
ymd('20150301')+years(1)
ymd('20150301')+days(365)
ymd('020301')
ymd('020301')-years(100)
SAM<-c(1:3)
SetDate<-c('02/07/14','05/08/14','09/08/14')
LiftDate<-c('03/07/14','07/08/14','11/08/14')
SetTime<-c('09:45', '10:15', '13:45')
LiftTime<-c('11:45', '9:30', '10:00')
Gear<-c('Gnet', 'GNet', 'GNet')
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear, stringsAsFactors=F)
str(set.data)
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
paste('a', 'b')
paste('a','pdf', sep=".")
head(set.data)
set.data$SET1<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
set.data$LIFT1<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
str(set.data)
with(set.data, LIFT1-SET1)
set.data$SET2<-dmy_hm(set.data$SET)
set.data$LIFT2<-dmy_hm(set.data$LIFT)
head(set.data)
str(set.data)
dur<-with(set.data, LIFT2-SET2)
dur
class(dur)
as.period(dur)
as.numeric(dur, units='hours')
as.numeric(dur, units='days')
as.numeric(dur, units='mins')
