test<-alkIndivAge(alk, AGE2~FLEN, wal.no.age)
head(test)
min(wal$FLEN)
cc.mlr
lens<-seq(100, 700, 50)
alk<-predict(cc.mlr, data.frame(lcat=lens), type='probs')
row.names(alk)<-lens
round(alk, 2)
wal.no.age$lcat<-lencat(wal.no.age$FLEN, w=50, startcat=100)
wal.no.age$AGE2<-NA
test<-alkIndivAge(alk, AGE2~FLEN, wal.no.age)
head(test)
xtab(~AGE2, wal.no.age)
xtabs(~AGE2, wal.no.age)
table(wal.no.age$AGE2)
xtabs(test$AGE2)
xtabs(~AGE2, test)
xtabs(~AGE, test)
plot(AGE~FLEN, test, col='blue')
plot(FLEN~AGE, test, col='blue')
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE, test, col='red')
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE, test, col='red', pch='*')
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE2, test, col='red', pch='*')
plot(AGE~AGE2, test)
abline(0,1)
plot(FLEN~AGE, test, col='blue', pch=19)
points(FLEN~AGE2, test, col='red', pch='*')
plot(AGE2~AGE, test)
abline(0,1)
alkIndivAge
?options
val<-rep(1:4, each=10)
val
yr<-rep(2001:2001, 4)
yr
yr<-rep(2001:2010, 4)
yr
categ<-rep(c("A", "B","C","D"), each=10)
categ<-as.factor(rep(c("A", "B","C","D"), each=10))
mylab<-c("A", "B","C","D")
plot(val~yr)
plot(val~yr, yaxt='n')
?axis
axis(side=1, at=c(1:4), labels=mylab)
axis(side=2, at=c(1:4), labels=mylab)
slidifyDefaults()
library("slidify", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
slidifyDefaults()
library("slidifyLibraries", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
?runif
ColA <- rep(c('A','B','C'), 5)
setseed(1234)
set.seed(1234)
ColB<-runif(15, min=0, max=100)
ColB
set.seed(1234)
ColB<-round(runif(15, min=0, max=100),0)
ColB
mydf<-data.frame(ColA,ColB)
aggregate(ColB~ColA, data=mydf)
aggregate(ColB~ColA, data=mydf, fun=mean)
aggregate(ColB~ColA, data=mydf, fun=mean)
aggregate(ColB~ColA, data=mydf, FUN=mean)
ColB
library("slidify", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
library("slidifyLibraries", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
slidify()
slidify(index.Rmd)
getwd()
slidify('/Tufts/Oct20/index.Rmd')
slidify('Tufts/Oct20/index.Rmd')
library(slidify)
publish_github(Tufts, gfs8966)
slidify()
get wd
getwd()
slidify('Tufts/Oct20/index.Rmd')
publish_github(Tufts, gfs8966)
publish_github('test', 'gfs8966')
publish(repo='test', username='gfs8966', host='github')
SAM<-c(1:3)
Date<-c('Jul 2', 'Aug 5', 'Aug 9')
Gear<-c('Efish', 'GNet', 'Efish')
mytab<-xtable::xtable(data.frame(SAM, Date, Gear))
print(mytab, type='html')
demo('shiny')
demo(shiny)
library(shiny)
demo(shiny)
demo('shiny')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot(x)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(plot(1:x), x = slider(5, 10))
myPlot()
myPlot(1)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
library(Rcharts)
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
a<-c(1:10)
b<-letters[1:10]
class(a); class(b)
str(a); str(b)
summary(a)
summary(b)
length(a); length(b)
##### Numeric vectors
mean(a)
min(a)
max(a)
quantile(a)
quantile(a, probs=seq(0,1,0.1))
###### NA example
c<-c(1:5,NA,6:10)
mean(c)
mean(c, na.rm=T)
anyNA(c)
d<-c(1:5, NULL, 6:10)
mean(d)
##### Matrix, Array and Dataframes
matrix(a, ncol=2)
array(a, dim=c(2,2,3))
# We're not likely going to spend much time with matrices and arrays
# Dataframe - our main work horse!
data.frame(a,b,d)
data.frame(a,b,c)
###### Using 'rep' to make a dataframe
spc<-rep(c('red fish', 'blue fish'), 5)
set.seed(16)
tl<-round(runif(10, min=250, max=500),0)
fish.data<-data.frame(spc, tl)
fish.data
str(fish.data)
###### default is to assign as text as 'Factors', why is this important?
barplot(fish.data$tl, col=as.factor(spc))
plot(tl~spc, fish.data)
table(fish.data$spc)
with(fish.data, by(tl, spc, mean)) #same as writing by(fish.data$tl, fish.data$spc, mean)
tapply(fish.data$tl, fish.data$spc, mean) # we'll deal with the apply family in more detail later
##### Reading data
getwd()
setwd('/home/jer/Tufts')
dir()
dir.create('StatsClass')
dir()
# move lengthdata.csv to this new directory
len.dat<-read.csv('StatsClass/lengthdata.csv')
str(len.dat)
# maybe we want to convert to some factors
len.dat$SPC<-as.factor(len.dat$SPC)
len.dat$SEX<-as.factor(len.dat$SEX)
len.dat$SAM<-as.factor(len.dat$SAM)
##### Saving Figures
hist(len.dat$FLEN)
barplot(table(len.dat$SPC))
pdf('StatsClass/myhist.pdf')
hist(len.dat$FLEN)
dev.off()
mysummary<-with(len.dat, tapply(FLEN, SPC, length)) # length = number of obs.
subset(a, a>8)
a[a>8]
len.dat[len.dat$FLEN<500,c(2,3)]
len.dat[len.dat$SEX==1 & len.dat$SPC==61,]
len.dat[len.dat$SEX==1 & !is.na(len.dat$SEX) & len.dat$SPC==61,]
spc61<-subset(len.dat, subset=(SPC==61))
plot(FLEN~SPC, spc61)
levels(spc61$SPC)
unique(spc61$SPC)
# What just happened? Subsetting worked but factor levels still present...???
# need to remove all factor levels
#spc61<-subset(len.dat, subset=(SPC==61), drop=T)
spc61$SPC<-droplevels(spc61$SPC)
levels(spc61$SPC)
##### what's the difference between & and |
subset(len.dat, subset=(SPC==380 & SEX==2))
subset(len.dat, subset=(SPC==380 | SEX==2))
##### Merge
# all combinations
x<-letters[1:3]
y<-letters[4:6]
merge(x,y)
##### Lookup table
# let's add some names to decode SEX
len.dat$SEX2<-with(len.dat, ifelse(SEX==1, 'male', ifelse(SEX==2,'female','unk')))
# Using merge
key.table<-data.frame(SEX=c(1,2,3), SEX2=c('male','female','unk'))
merge(len.dat, key.table, by='SEX')
##### Use two fields
malesmelt<-data.frame(SPC=121, SEX=1, NAME='smelt male')
merge(len.dat, malesmelt, by=c('SPC', 'SEX'))
merge(len.dat, malesmelt, by=c('SPC', 'SEX'), all.x=T)
with(len.dat, apply(FLEN, SPC))
with(len.dat, apply(FLEN, SPC, mean))
apply(len.dat$FLEN, len.dat$SPC, mean))
apply(len.dat$FLEN, len.dat$SPC, mean)
len.dat<-read.csv('StatsClass/lengthdata.csv')
head(len.dat)
apply(len.dat$FLEN, len.dat$SPC, mean)
anyNA(len.dat$FLEN)
apply(len.dat$FLEN, len.dat$SPC, mean, na.rm=T)
tapply(len.dat$FLEN, len.dat$SPC, mean, na.rm=T)
with(len.dat, by(FLEN, SPC, mean, na.rm=T)
)
names(len.dat)
tapply(len.dat$FISH, len.dat$SAM, nrow)
with(len.dat, by(FISH, c('SAM', 'SPC', nrow)))
with(len.dat, by(FISH, c('SAM', 'SPC'), nrow)))
with(len.dat, by(FISH, c('SAM', 'SPC'), nrow))
?tapply
aggregate(FISH~SAM+SPC, len.dat, nrow)
aggregate(FISH~SAM+SPC, len.dat, length)
with(len.dat, sapply(FISH,c(SAM, SPC),length ))
with(len.dat, sapply(FISH,by=c(SAM, SPC),length ))
with(len.dat, sapply(FISH,list=c(SAM, SPC),length))
?sapply
with(len.dat, apply(FISH, list=c(SAM, SPC),length))
names(len.dat)
len.dat[,1:2]
by(len.dat$FISH, len.dat[,1:2], length)
apply(len.dat$FISH, len.dat[,1;2], length)
apply(len.dat$FISH, len.dat[,1:2], length)
SAM<-c(1:3)
Date<-c('Jul 2', 'Aug 5', 'Aug 9')
Gear<-c('Efish', 'GNet', 'Efish')
mytab<-data.frame(SAM, Date, Gear))
mytab<-data.frame(SAM, Date, Gear)
newtab<-merge(len.dat, mytab, by=c('SAM'))
head(newtab)
mean(newtab$FLEN[newtab$SPC==61 & newtab$Gear=='Efish'])
newtab$FLEN[newtab$SPC==61 & newtab$Gear=='Efish']
plot(FLEN~Gear, newtab[newtab$SPC==121])
plot(FLEN~Gear, newtab[newtab$SPC==121,])
b<-round(runif(20, min=0, max=50),0)
b
order(b)
order(-a)
a
a
a<-c(letters[3:5], letters[1:2], letters[6:10])
a
order(a)
order(-a)
-order(a)
?order
order(a, dec = T)
order(a, DEC = T)
order(a, decreasing = T)
a[order(a)]
myord<-order(a)
myord
a[myord]
a[order(a)]
b[order(-b)]
setseed(123)
set.seed(123)
b<-round(runif(10, min=0, max=50),0)
b
order(b)
order(b, decreasing=T)
b[order(b)]
b
order(b)
order(a)
a
order(a)
len.dat<-read.csv('StatsClass/lengthdata.csv')
head(len.dat)
tail(len.dat)
len.dat[order('SAM', 'SPC'),]
len.dat[order(len.dat[c(1,2,6)])],]
len.dat[order(len.dat[c(1,2,6)])]
len.dat[order(len.dat[c(1,2,6),])]
len.dat[order(len.dat[c(1,2,6)]),]
len.dat[order(len.dat[c(1,2)]),]
len.dat[ order(SAM),]
order(SAM)
len.dat[ order(len.dat$SAM),]
len.dat[order(len.dat[c(1,2)]),]
len.dat[order(len.dat$SAM, len.dat$SPC),]
View(len.dat[ order(len.dat$SAM),])
library(reshape2)
len.dat<-len.dat[len.dat$SPC!=380,]
len.dat$TLEN<-(len.dat$FLEN+10)/100
head
head(len.dat)
len.dat$TLEN<-(len.dat$FLEN+10)/10
head(len.dat)
len.dat.long<-melt(len.dat, id=c('SAM', 'SPC', 'FISH', 'SEX'))
head(len.dat.long)
tail(len.dat.long)
units<-data.frame(variable=c('TLEN', 'FLEN'), unit=c('cm','mm'))
units
len.dat.long<-merge(len.dat.long, units, by='variable')
head(len.dat.long)
tail(len.dat.long)
len.dat.long<-len.dat.long[,c(2:5,1,6:7)]
head(len.dat.long)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
head(aqm)
acast(aqm, day ~ month ~ variable)
dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
head(len.dat.long)
len.dat.wide<-cast(len.dat.long, value~variable, margins=c('SAM', 'SPC','FISH','SEX'))
len.dat.wide<-dcast(len.dat.long, value~variable, margins=c('SAM', 'SPC','FISH','SEX'))
len.dat.wide<-dcast(len.dat.long, value~variable, mean, margins=c('SAM', 'SPC','FISH','SEX'))
head(len.dat.wide)
len.dat.wide<-dcast(len.dat.long, variable~value, mean, margins=c('SAM', 'SPC','FISH','SEX'))
head(len.dat.wide)
len.dat.wide<-dcast(len.dat.long, variable~value, mean)
head(len.dat.wide)
len.dat.wide<-dcast(len.dat.long, value.var='value', mean)
head(len.dat.long)
len.dat.wide<-dcast(len.dat.long, value.var='variable', mean)
?reshape
summary(Indometh)
head(Indometh)
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
head(len.dat.long)
len.dat.wide<-reshape(len.dat.long, direction='wide', idvar=c('SAM','SPC','FISH','SEX'),
v.names='value', timevar='variable')
head(len.dat.wide)
len.dat.long<-len.dat.long[,-7]
len.dat.wide<-reshape(len.dat.long, direction='wide', idvar=c('SAM','SPC','FISH','SEX'),
v.names='value', timevar='variable')
head(len.dat.wide)
names(len.dat.wide)[5:6]<-c('FLEN','TLEN')
head(len.dat.wide)
dcast(len.dat.wide, FLEN~SEX, mean)
dcast(len.dat.wide, SPC~SEX, mean, value.var='FLEN')
dcast(len.dat.wide, SAM~SPC, mean, value.var='TLEN')
dcast(len.dat.wide, SAM~SPC, max, value.var='TLEN')
head(len.dat)
sum1<-aggregate(FLEN~SPC, len.dat, mean)
head(sum1)
sum1
sum2<-aggregate(FLEN~SPC+SEX, data=len.dat, mean)
sum2
as.data.frame(sum2)
class(sum2)
aggregate(TLEN~SAM+SPC, len.dat, max)
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
aggregate(cbind(FLEN, TLEN)~SAM+SPC, data=len.dat, length)
aggregate(FISH~SAM+SPC, data=len.dat, length)
len.dat$FLEN[2,7]<-NA
len.dat$FLEN[c(2,7)]<-NA
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
head(len.dat)
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
sum2<-aggregate(FLEN~SPC+SEX, data=len.dat, mean)
sum2 # notice it only returns combinations that exist
len.dat$FLEN[c(2,7)]<-"NA"
head(len.dat)
head(len.dat,10)
aggregate(FLEN~SPC+SEX, data=len.dat, mean)
len.dat$FLEN[c(2,7)]<-NA
aggregate(FLEN~SPC+SEX, data=len.dat, mean)
head(len.dat,10)
str(len.dat)
len.dat$FLEN<-as.integer(len.dat$FLEN)
aggregate(FLEN~SPC+SEX, data=len.dat, mean)
anyNA(len.dat$FLEN)
head(len.dat,10)
len.dat$FLEN[c(1,2,7)]<-NA
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
head(len.dat,10)
mean(len.dat$FLEN)
aggregate(cbind(FLEN, TLEN)~SPC, data=len.dat, mean)
mean(len.dat$FLEN)
mean(len.dat$FLEN[len.dat$SPC==121])
aggregate(FLEN~SPC, len.dat, mean)
aggregate(FLEN~SPC, len.dat, max)
len.dat<-read.csv('StatsClass/lengthdata.csv')
len.dat<-len.dat[len.dat$SPC!=380,] # sculpins don't have a FLEN
aggregate(cbind(FLEN, TLEN)~SPC+SEX, data=len.dat, mean)
aggregate(FISH~SAM+SPC, data=len.dat, length)
len.dat$TLEN<-(len.dat$FLEN+10)/10
aggregate(cbind(FLEN, TLEN)~SPC, data=len.dat, mean)
myfunct<-function(x) {cbind(xbar=mean(x), stdev=sd(x), n=length(x)}
myfunct<-function(x) {cbind(xbar=mean(x), stdev=sd(x), n=length(x))}
myfunct(b)
b
myfunct(b)
class(myfunct(b))
aggregate(FLEN~SPC, data=len.dat, myfunct)
sum3<-aggregate(FLEN~SPC, data=len.dat, myfunct)
sum3
sum3<-as.data.frame(aggregate(FLEN~SPC, data=len.dat, myfunct))
sum3
sum3<-as.data.frame(as.list((aggregate(FLEN~SPC, data=len.dat, myfunct))))
sum3
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=length(x))}
b
myfunct(b)
aggregate(FLEN~SAM+SPC, len.dat, myfunct)
sum3<-as.data.frame(as.list((aggregate(FLEN~SPC, data=len.dat, myfunct))))
sum3
as.list(aggregate(FLEN~SAM+SPC, len.dat, myfunct))
as.data.frame(as.list(aggregate(FLEN~SAM+SPC, len.dat, myfunct)))
sum3<-aggregate(FLEN~SAM+SPC, len.dat, myfunct)
sum3
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=round(length(x),0)}
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=round(length(x),0))}
b
myfunct(b)
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=round(length(x),0))}
myfunct(b)
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=length(x))}
b
myfunct(b)
sum3<-aggregate(FLEN~SAM+SPC, len.dat, myfunct)
sum3
class(sum3)
sum4<-as.data.frame(as.list((aggregate(cbine(FLEN,TLEN)~SPC, data=len.dat, myfunct))))
sum4<-as.data.frame(as.list((aggregate(cbind(FLEN,TLEN)~SPC, data=len.dat, myfunct))))
sum4
aggregate(cbind(FLEN,TLEN)~SPC, data=len.dat, myfunct)
myfunct<-function(x) {xbar=mean(x), stdev=sd(x), n=length(x)}
myfunct<-function(x) {xbar=mean(x); stdev=sd(x); n=length(x)}
myfunct(b)
b
myfunct(b)
myfunct<-function(x) {c(xbar=mean(x), stdev=sd(x), n=length(x))}
aggregate(FLEN~SAM+SPC, len.dat, myfunct)
aggregate(cbind(FLEN,TLEN)~SPC, data=len.dat, myfunct)
Date<-c('02/07/14','05/08/14','09/08/14')
SAM<-c(1:3)
SetDate<-c('02/07/14','05/08/14','09/08/14')
LiftDate<-c('03/07/14','07/08/14','11/08/14')
SetTime<-c('09:45', '10:15', '13:45')
LiftTime<-c('11:45', '9:30', '10:00')
Gear<-c('Gnet', 'GNet', 'GNet')
set.data<-data.frame(SAM, Date, Gear)
str(set.data)
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear)
str(set.data)
SetDate<-as.character(c('02/07/14','05/08/14','09/08/14'))
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear)
str(set.data)
?data.frame
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear, stringsAsFactors=F)
str(set.data)
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, liftTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
?as.Date
set.data$SET<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
head(set.data)
set.data$LIFY<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
set.data$LIFT<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
set.data<-data.frame(SAM, SetDate, LiftDate, SetTime, LiftTime, Gear, stringsAsFactors=F)
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
set.data$SET<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
set.data$LIFT<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
with(set.data, LIFT-SET)
library(lubridate)
set.data$SET<-paste(SetDate, SetTime)
set.data$LIFT<-paste(LiftDate, LiftTime)
head(set.data)
set.data$SET1<-as.Date(set.data$SET, format="%d/%m/%y %H:%M")
set.data$LIFT1<-as.Date(set.data$LIFT, format="%d/%m/%y %H:%M")
with(set.data, LIFT-SET)
with(set.data, LIFT1-SET1)
set.data$SET2<-dmy_hm(set.data$SET)
set.data$LIFT2<-dmy_hm(set.data$LIFT)
with(set.data, LIFT2-SET2)
dur<-with(set.data, LIFT2-SET2)
hours(dur)
dur<-with(set.data, LIFT2-SET2)
dur
hour(dur)
as.period(dur)
